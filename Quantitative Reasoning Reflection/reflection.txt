Donal Mackin
12/4/2
Quantitative reasoning assignment

1.Describe how you used multiple quantitative methods, techniques and algorithms
to add functionality to your program. How did you decided what method to use? For
example, how did you use lists? “If” statements? Loops? Classes? Functions?
Sample pieces of code? How did you decide which methods to apply? Feel free to give examples.

Throughout the class we were shown a wide range of coding methods and techniques
that we used to create functional programming. Deciding what methods to use depended
upon what tasks had been asked of us. This is exemplified by when we had to codify
a basic game we had to use classes to develop the traits of any sprites, we had
to create a series of loops and "If" statements to ensure they moved and functioned
correctly. Whilst choosing these methods was done out of necessity the way in
which we chose to use them was motivated by what personal style worked best for
you as an individual, like using example code which was preferred by some but
rejected by others. This reinforces the idea that what code we used was based upon
our preference.
 Building on from this once these basic methods for getting the
program working were chosen we then chose subsequent techniques and algorithms
to ensure a personalised approach to the game. This was well exemplified by the
use of sprites which whilst coded in to a game the same way, were completely unique
to what each individual's whim was. So a combination of necessity and
personal design preference made us decide what methods to apply and how to apply
them.

2.Explain how you communicate your solution (from one programmer to another) when
writing the code. Show how variable names matter, how function names matter,
how comments and structure make your code easier to read.

When communicating solutions to another programmer the most fundamental thing is
to understand the specialist lexicon that surrounds code, any solutions should be
discussed in these confines to ensure the clearest understanding of what the solution
is can be achieved by the other programmer. Alongside this lexicon, communication
when writing code is best achieved by use of headings such as #Character, which
allow a person to clearly see each segment of code and what it does, helping them
understand where the problem originated from.
Furthermore, the importance of variable and function names in communication is
also paramount. Variables and functions are among the easiest concepts to lose
track of when coding owing to their repeated use and are a prime example of how
communication of code can be complex or straightforward. For example were one to
have two variables, one titled "Coin" and the other titled "Coins", the problems
can already be seen as variables and functions that do not differentiate enough
will naturally result in confusion and headaches from some kind of mis-entry. This
codifies why communication is important not only between programmers but also
with yourself as if code is made clear through segmentation and titling than not
only will someone else understand it better but so will you.

3.How did you test and evaluate the accuracy of your code? When something didn’t work,
describe how you debugged what the error was.
Also, how do you determine if data returned is correct data?

Whenever I was faced with a coding problem I would first check the sections that
were flagged up by Pycharm, after this I would take that section of code in isolation
and attempt to figure out what was missing from it. Once I had figured out where
the problem lay I would then try to amend it first by myself but if that did not
work with the help of a classmate or teacher. My method of testing and evaluating
the accuracy of my code was done by running it firstly to see if it worked and
could run in the first place. Similarly to how I debugged code I would also
evaluate accuracy personally and then with the help of other people.
    To ensure data that was being returned was correct, I would always attempt a
few practice examples to which I knew what the correct answer or outcome would be
if that worked accurately I would assume that the data returned was correct or if
there was an example of what the correct outcome should be I would ensure I had
matched that.

4.What are the limitations to using numerical methods to make decisions?
For example, why can’t we just replace humans with algorithms?
Why can’t we just evaluate students based solely on test scores?
Why can’t we evaluate teachers just on how their students do?
What is the limitation to evaluating athletes just on their stats?

Numerical methods are based on logic and statistics, whilst at first glance this
appears an effective way to make decisions it suffers from one very fundamental
flaw the lack of logic in life. As to why we shouldn't replace humans with algorithms,
the simple fact is they wouldn't be as effective on their own because of all the
illogical things that transpire in life. If someone contests a parking ticket they
were guilty of on no grounds, algorithms cannot deal with such a lack of sense, we
know however this is merely part of human nature.Boiling down people to their
statistics whether teachers or athletes suffers the same problem, the fact that
stats can change regularly and dramatically mean a purely logical approach
cannot work for society, it must be catered to human nature.
    Expanding upon this in broad terms is the issue of uncertainty in life. A
computer cannot deal with uncertainty, when something defies its logic it will
glitch or fail to function, no matter how comprehensive a program is made it will
always have that fundamental failing. As such computers can never fully replace
us as they are simply unable to function in a real world where everything cannot
be broken down into a binary system of 1s and 0s.